/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package adf.database;

import java.util.Base64;
import java.util.stream.IntStream;

import com.proto.transporter.Object;
import com.proto.transporter.ObjectList;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPubSub;

public class App {
    // Redis client
    private static Jedis jedis;

    public static void main(String[] args) {
        // Connecting to Redis server on localhost
        jedis = new Jedis("localhost", 6379);
        System.out.println("Connection to server successfully");

        // Subscribe to a channel to get the response
        new Thread(() -> {
            try (Jedis jedisSubscribe = new Jedis("localhost", 6379)) {
                System.out.println("Subscribing to channel: response");
                jedisSubscribe.subscribe(new JedisPubSub() {
                    @Override
                    public void onMessage(String channel, String message) {
                        try {
                            ObjectList response = ObjectList.parseFrom(Base64.getDecoder().decode(message));
                            System.out
                                    .println("Received message: " + response.toString() + " from channel: " + channel);
                        } catch (Exception e) {
                            System.err.println("Error parsing message: " + message);
                            e.printStackTrace();
                        }
                    }
                }, "response");
            }
        }).start();

        // Publish a message to a channel
        ObjectList request = ObjectList.newBuilder()
                .addAllObjects(IntStream.range(0, 100).boxed()
                        .map(i -> Object.newBuilder().setX(Math.random()).build())
                        .toList())
                .setUuid("1234567890")
                .build();

        // Publish the message to the channel byte channel
        jedis.publish("request", Base64.getEncoder().encodeToString(request.toByteArray()));
        System.err.println("Published message: " + request.toString() + " to channel: request");
    }
}

/*
 * a
 * b
 * c
 * d
 * nsat
 * 
 * a 0
 * b 1
 * c 1
 * d 1 or 0
 * sat
 * 
 * a
 * b
 * c
 * nsat
 */